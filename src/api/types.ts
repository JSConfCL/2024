/* eslint-disable */
/* @ts-nocheck */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import type { GraphQLClient, RequestOptions } from 'graphql-request';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
type GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: unknown; output: unknown; }
  DateTime: { input: unknown; output: unknown; }
  JSON: { input: unknown; output: unknown; }
};

export type Block = {
  __typename?: 'Block';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  children: Maybe<Array<Maybe<Span>>>;
  level: Maybe<Scalars['Float']['output']>;
  listItem: Maybe<Scalars['String']['output']>;
  style: Maybe<Scalars['String']['output']>;
};

export type BooleanFilter = {
  /** Checks if the value is equal to the given input. */
  eq: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks if the value is defined. */
  is_defined: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks if the value is not equal to the given input. */
  neq: InputMaybe<Scalars['Boolean']['input']>;
};

export type Card = {
  __typename?: 'Card';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  description: Maybe<RichText>;
  icon: Maybe<Scalars['String']['output']>;
  image: Maybe<Image>;
  showType: Maybe<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type CardFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  description: InputMaybe<RichTextFilter>;
  icon: InputMaybe<StringFilter>;
  image: InputMaybe<ImageFilter>;
  showType: InputMaybe<StringFilter>;
  title: InputMaybe<StringFilter>;
};

export type CardOrCustomInfoOrHeroOrRichTextOrRow = Card | CustomInfo | Hero | RichText | Row;

export type CardOrImageOrRichText = Card | Image | RichText;

export type CardSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  description: InputMaybe<RichTextSorting>;
  icon: InputMaybe<SortOrder>;
  image: InputMaybe<ImageSorting>;
  showType: InputMaybe<SortOrder>;
  title: InputMaybe<SortOrder>;
};

export type Community = Document & {
  __typename?: 'Community';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  logo: Maybe<Image>;
  name: Maybe<Scalars['String']['output']>;
  webpage: Maybe<Scalars['String']['output']>;
};

export type CommunityFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  logo: InputMaybe<ImageFilter>;
  name: InputMaybe<StringFilter>;
  webpage: InputMaybe<StringFilter>;
};

export type CommunitySorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  logo: InputMaybe<ImageSorting>;
  name: InputMaybe<SortOrder>;
  webpage: InputMaybe<SortOrder>;
};

export type CrossDatasetReference = {
  __typename?: 'CrossDatasetReference';
  _dataset: Maybe<Scalars['String']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  _projectId: Maybe<Scalars['String']['output']>;
  _ref: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  _weak: Maybe<Scalars['Boolean']['output']>;
};

export type CrossDatasetReferenceFilter = {
  _dataset: InputMaybe<StringFilter>;
  _key: InputMaybe<StringFilter>;
  _projectId: InputMaybe<StringFilter>;
  _ref: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _weak: InputMaybe<BooleanFilter>;
};

export type CrossDatasetReferenceSorting = {
  _dataset: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _projectId: InputMaybe<SortOrder>;
  _ref: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _weak: InputMaybe<SortOrder>;
};

export type CustomAttributes = {
  __typename?: 'CustomAttributes';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  name: Maybe<Scalars['String']['output']>;
  value: Maybe<Scalars['String']['output']>;
};

export type CustomAttributesFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  name: InputMaybe<StringFilter>;
  value: InputMaybe<StringFilter>;
};

export type CustomAttributesSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  name: InputMaybe<SortOrder>;
  value: InputMaybe<SortOrder>;
};

export type CustomInfo = {
  __typename?: 'CustomInfo';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  actions: Maybe<Array<Maybe<Link>>>;
  attributes: Maybe<Array<Maybe<CustomAttributes>>>;
  description: Maybe<RichText>;
  name: Maybe<Scalars['String']['output']>;
  slug: Maybe<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type CustomInfoFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  description: InputMaybe<RichTextFilter>;
  name: InputMaybe<StringFilter>;
  slug: InputMaybe<StringFilter>;
  title: InputMaybe<StringFilter>;
};

export type CustomInfoSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  description: InputMaybe<RichTextSorting>;
  name: InputMaybe<SortOrder>;
  slug: InputMaybe<SortOrder>;
  title: InputMaybe<SortOrder>;
};

export type DateFilter = {
  /** Checks if the value is equal to the given input. */
  eq: InputMaybe<Scalars['Date']['input']>;
  /** Checks if the value is greater than the given input. */
  gt: InputMaybe<Scalars['Date']['input']>;
  /** Checks if the value is greater than or equal to the given input. */
  gte: InputMaybe<Scalars['Date']['input']>;
  /** Checks if the value is defined. */
  is_defined: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks if the value is lesser than the given input. */
  lt: InputMaybe<Scalars['Date']['input']>;
  /** Checks if the value is lesser than or equal to the given input. */
  lte: InputMaybe<Scalars['Date']['input']>;
  /** Checks if the value is not equal to the given input. */
  neq: InputMaybe<Scalars['Date']['input']>;
};

export type DatetimeFilter = {
  /** Checks if the value is equal to the given input. */
  eq: InputMaybe<Scalars['DateTime']['input']>;
  /** Checks if the value is greater than the given input. */
  gt: InputMaybe<Scalars['DateTime']['input']>;
  /** Checks if the value is greater than or equal to the given input. */
  gte: InputMaybe<Scalars['DateTime']['input']>;
  /** Checks if the value is defined. */
  is_defined: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks if the value is lesser than the given input. */
  lt: InputMaybe<Scalars['DateTime']['input']>;
  /** Checks if the value is lesser than or equal to the given input. */
  lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Checks if the value is not equal to the given input. */
  neq: InputMaybe<Scalars['DateTime']['input']>;
};

/** A Sanity document */
export type Document = {
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
};

export type DocumentFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
};

export type DocumentSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
};

export type File = {
  __typename?: 'File';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  asset: Maybe<SanityFileAsset>;
};

export type FileFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  asset: InputMaybe<SanityFileAssetFilter>;
};

export type FileSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
};

export type FloatFilter = {
  /** Checks if the value is equal to the given input. */
  eq: InputMaybe<Scalars['Float']['input']>;
  /** Checks if the value is greater than the given input. */
  gt: InputMaybe<Scalars['Float']['input']>;
  /** Checks if the value is greater than or equal to the given input. */
  gte: InputMaybe<Scalars['Float']['input']>;
  /** Checks if the value is defined. */
  is_defined: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks if the value is lesser than the given input. */
  lt: InputMaybe<Scalars['Float']['input']>;
  /** Checks if the value is lesser than or equal to the given input. */
  lte: InputMaybe<Scalars['Float']['input']>;
  /** Checks if the value is not equal to the given input. */
  neq: InputMaybe<Scalars['Float']['input']>;
};

export type Footer = Document & {
  __typename?: 'Footer';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  followLinks: Maybe<Array<Maybe<Link>>>;
  name: Maybe<Scalars['String']['output']>;
  sectionLinks: Maybe<Array<Maybe<Link>>>;
};

export type FooterFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  name: InputMaybe<StringFilter>;
};

export type FooterSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  name: InputMaybe<SortOrder>;
};

export type Geopoint = {
  __typename?: 'Geopoint';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  alt: Maybe<Scalars['Float']['output']>;
  lat: Maybe<Scalars['Float']['output']>;
  lng: Maybe<Scalars['Float']['output']>;
};

export type GeopointFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  alt: InputMaybe<FloatFilter>;
  lat: InputMaybe<FloatFilter>;
  lng: InputMaybe<FloatFilter>;
};

export type GeopointSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  alt: InputMaybe<SortOrder>;
  lat: InputMaybe<SortOrder>;
  lng: InputMaybe<SortOrder>;
};

export type Hero = {
  __typename?: 'Hero';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  actions: Maybe<Array<Maybe<Link>>>;
  customAttributes: Maybe<Array<Maybe<CustomAttributes>>>;
  heading: Maybe<Scalars['String']['output']>;
  icon: Maybe<Scalars['String']['output']>;
  image: Maybe<Image>;
  tagline: Maybe<Scalars['String']['output']>;
};

export type HeroFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  heading: InputMaybe<StringFilter>;
  icon: InputMaybe<StringFilter>;
  image: InputMaybe<ImageFilter>;
  tagline: InputMaybe<StringFilter>;
};

export type HeroSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  heading: InputMaybe<SortOrder>;
  icon: InputMaybe<SortOrder>;
  image: InputMaybe<ImageSorting>;
  tagline: InputMaybe<SortOrder>;
};

export type IdFilter = {
  /** Checks if the value is equal to the given input. */
  eq: InputMaybe<Scalars['ID']['input']>;
  in: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Checks if the value matches the given word/words. */
  matches: InputMaybe<Scalars['ID']['input']>;
  /** Checks if the value is not equal to the given input. */
  neq: InputMaybe<Scalars['ID']['input']>;
  nin: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type Image = {
  __typename?: 'Image';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  asset: Maybe<SanityImageAsset>;
  crop: Maybe<SanityImageCrop>;
  hotspot: Maybe<SanityImageHotspot>;
};

export type ImageFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  asset: InputMaybe<SanityImageAssetFilter>;
  crop: InputMaybe<SanityImageCropFilter>;
  hotspot: InputMaybe<SanityImageHotspotFilter>;
};

export type ImageSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  crop: InputMaybe<SanityImageCropSorting>;
  hotspot: InputMaybe<SanityImageHotspotSorting>;
};

export type IntFilter = {
  /** Checks if the value is equal to the given input. */
  eq: InputMaybe<Scalars['Int']['input']>;
  /** Checks if the value is greater than the given input. */
  gt: InputMaybe<Scalars['Int']['input']>;
  /** Checks if the value is greater than or equal to the given input. */
  gte: InputMaybe<Scalars['Int']['input']>;
  /** Checks if the value is defined. */
  is_defined: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks if the value is lesser than the given input. */
  lt: InputMaybe<Scalars['Int']['input']>;
  /** Checks if the value is lesser than or equal to the given input. */
  lte: InputMaybe<Scalars['Int']['input']>;
  /** Checks if the value is not equal to the given input. */
  neq: InputMaybe<Scalars['Int']['input']>;
};

export type Link = Document & {
  __typename?: 'Link';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  icon: Maybe<Scalars['String']['output']>;
  style: Maybe<Scalars['String']['output']>;
  target: Maybe<Scalars['String']['output']>;
  text: Maybe<Scalars['String']['output']>;
  url: Maybe<Scalars['String']['output']>;
};

export type LinkFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  icon: InputMaybe<StringFilter>;
  style: InputMaybe<StringFilter>;
  target: InputMaybe<StringFilter>;
  text: InputMaybe<StringFilter>;
  url: InputMaybe<StringFilter>;
};

export type LinkSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  icon: InputMaybe<SortOrder>;
  style: InputMaybe<SortOrder>;
  target: InputMaybe<SortOrder>;
  text: InputMaybe<SortOrder>;
  url: InputMaybe<SortOrder>;
};

export type Member = Document & {
  __typename?: 'Member';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  name: Maybe<Scalars['String']['output']>;
  photo: Maybe<Image>;
  slug: Maybe<Scalars['String']['output']>;
  type: Maybe<Scalars['String']['output']>;
  webpage: Maybe<Scalars['String']['output']>;
};

export type MemberFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  name: InputMaybe<StringFilter>;
  photo: InputMaybe<ImageFilter>;
  slug: InputMaybe<StringFilter>;
  type: InputMaybe<StringFilter>;
  webpage: InputMaybe<StringFilter>;
};

export type MemberSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  name: InputMaybe<SortOrder>;
  photo: InputMaybe<ImageSorting>;
  slug: InputMaybe<SortOrder>;
  type: InputMaybe<SortOrder>;
  webpage: InputMaybe<SortOrder>;
};

export type Navbar = Document & {
  __typename?: 'Navbar';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  links: Maybe<Array<Maybe<Link>>>;
  name: Maybe<Scalars['String']['output']>;
};

export type NavbarFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  name: InputMaybe<StringFilter>;
};

export type NavbarSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  name: InputMaybe<SortOrder>;
};

export type Page = Document & {
  __typename?: 'Page';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  /** If true, page will be genearated automatically using the slug. In any other case, this slug should be used as refrerence in a specific page. */
  dynamicPage: Maybe<Scalars['Boolean']['output']>;
  footer: Maybe<Footer>;
  name: Maybe<Scalars['String']['output']>;
  navbar: Maybe<Navbar>;
  sections: Maybe<Array<Maybe<CardOrCustomInfoOrHeroOrRichTextOrRow>>>;
  seoDescription: Maybe<Scalars['String']['output']>;
  seoImage: Maybe<Image>;
  seoKeywords: Maybe<Scalars['String']['output']>;
  seoTitle: Maybe<Scalars['String']['output']>;
  slug: Maybe<Slug>;
};

export type PageFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  dynamicPage: InputMaybe<BooleanFilter>;
  footer: InputMaybe<FooterFilter>;
  name: InputMaybe<StringFilter>;
  navbar: InputMaybe<NavbarFilter>;
  seoDescription: InputMaybe<StringFilter>;
  seoImage: InputMaybe<ImageFilter>;
  seoKeywords: InputMaybe<StringFilter>;
  seoTitle: InputMaybe<StringFilter>;
  slug: InputMaybe<SlugFilter>;
};

export type PageSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  dynamicPage: InputMaybe<SortOrder>;
  name: InputMaybe<SortOrder>;
  seoDescription: InputMaybe<SortOrder>;
  seoImage: InputMaybe<ImageSorting>;
  seoKeywords: InputMaybe<SortOrder>;
  seoTitle: InputMaybe<SortOrder>;
  slug: InputMaybe<SlugSorting>;
};

export type RichText = {
  __typename?: 'RichText';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  htmlTextRaw: Maybe<Scalars['JSON']['output']>;
  markdownText: Maybe<Scalars['String']['output']>;
  name: Maybe<Scalars['String']['output']>;
  textType: Maybe<Scalars['String']['output']>;
};

export type RichTextFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  markdownText: InputMaybe<StringFilter>;
  name: InputMaybe<StringFilter>;
  textType: InputMaybe<StringFilter>;
};

export type RichTextSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  markdownText: InputMaybe<SortOrder>;
  name: InputMaybe<SortOrder>;
  textType: InputMaybe<SortOrder>;
};

export type RootQuery = {
  __typename?: 'RootQuery';
  Community: Maybe<Community>;
  Document: Maybe<Document>;
  Footer: Maybe<Footer>;
  Link: Maybe<Link>;
  Member: Maybe<Member>;
  Navbar: Maybe<Navbar>;
  Page: Maybe<Page>;
  SanityFileAsset: Maybe<SanityFileAsset>;
  SanityImageAsset: Maybe<SanityImageAsset>;
  Speaker: Maybe<Speaker>;
  Sponsor: Maybe<Sponsor>;
  SponsorType: Maybe<SponsorType>;
  allCommunity: Array<Community>;
  allDocument: Array<Document>;
  allFooter: Array<Footer>;
  allLink: Array<Link>;
  allMember: Array<Member>;
  allNavbar: Array<Navbar>;
  allPage: Array<Page>;
  allSanityFileAsset: Array<SanityFileAsset>;
  allSanityImageAsset: Array<SanityImageAsset>;
  allSpeaker: Array<Speaker>;
  allSponsor: Array<Sponsor>;
  allSponsorType: Array<SponsorType>;
};


export type RootQueryCommunityArgs = {
  id: Scalars['ID']['input'];
};


export type RootQueryDocumentArgs = {
  id: Scalars['ID']['input'];
};


export type RootQueryFooterArgs = {
  id: Scalars['ID']['input'];
};


export type RootQueryLinkArgs = {
  id: Scalars['ID']['input'];
};


export type RootQueryMemberArgs = {
  id: Scalars['ID']['input'];
};


export type RootQueryNavbarArgs = {
  id: Scalars['ID']['input'];
};


export type RootQueryPageArgs = {
  id: Scalars['ID']['input'];
};


export type RootQuerySanityFileAssetArgs = {
  id: Scalars['ID']['input'];
};


export type RootQuerySanityImageAssetArgs = {
  id: Scalars['ID']['input'];
};


export type RootQuerySpeakerArgs = {
  id: Scalars['ID']['input'];
};


export type RootQuerySponsorArgs = {
  id: Scalars['ID']['input'];
};


export type RootQuerySponsorTypeArgs = {
  id: Scalars['ID']['input'];
};


export type RootQueryAllCommunityArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<CommunitySorting>>;
  where: InputMaybe<CommunityFilter>;
};


export type RootQueryAllDocumentArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<DocumentSorting>>;
  where: InputMaybe<DocumentFilter>;
};


export type RootQueryAllFooterArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<FooterSorting>>;
  where: InputMaybe<FooterFilter>;
};


export type RootQueryAllLinkArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<LinkSorting>>;
  where: InputMaybe<LinkFilter>;
};


export type RootQueryAllMemberArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<MemberSorting>>;
  where: InputMaybe<MemberFilter>;
};


export type RootQueryAllNavbarArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<NavbarSorting>>;
  where: InputMaybe<NavbarFilter>;
};


export type RootQueryAllPageArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<PageSorting>>;
  where: InputMaybe<PageFilter>;
};


export type RootQueryAllSanityFileAssetArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<SanityFileAssetSorting>>;
  where: InputMaybe<SanityFileAssetFilter>;
};


export type RootQueryAllSanityImageAssetArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<SanityImageAssetSorting>>;
  where: InputMaybe<SanityImageAssetFilter>;
};


export type RootQueryAllSpeakerArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<SpeakerSorting>>;
  where: InputMaybe<SpeakerFilter>;
};


export type RootQueryAllSponsorArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<SponsorSorting>>;
  where: InputMaybe<SponsorFilter>;
};


export type RootQueryAllSponsorTypeArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<Array<SponsorTypeSorting>>;
  where: InputMaybe<SponsorTypeFilter>;
};

export type Row = {
  __typename?: 'Row';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  children: Maybe<Array<Maybe<CardOrImageOrRichText>>>;
  description: Maybe<RichText>;
  icon: Maybe<Scalars['String']['output']>;
  rowType: Maybe<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type RowFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  description: InputMaybe<RichTextFilter>;
  icon: InputMaybe<StringFilter>;
  rowType: InputMaybe<StringFilter>;
  title: InputMaybe<StringFilter>;
};

export type RowSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  description: InputMaybe<RichTextSorting>;
  icon: InputMaybe<SortOrder>;
  rowType: InputMaybe<SortOrder>;
  title: InputMaybe<SortOrder>;
};

export type SanityAssetSourceData = {
  __typename?: 'SanityAssetSourceData';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  /** The unique ID for the asset within the originating source so you can programatically find back to it */
  id: Maybe<Scalars['String']['output']>;
  /** A canonical name for the source this asset is originating from */
  name: Maybe<Scalars['String']['output']>;
  /** A URL to find more information about this asset in the originating source */
  url: Maybe<Scalars['String']['output']>;
};

export type SanityAssetSourceDataFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  id: InputMaybe<StringFilter>;
  name: InputMaybe<StringFilter>;
  url: InputMaybe<StringFilter>;
};

export type SanityAssetSourceDataSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  id: InputMaybe<SortOrder>;
  name: InputMaybe<SortOrder>;
  url: InputMaybe<SortOrder>;
};

export type SanityFileAsset = Document & {
  __typename?: 'SanityFileAsset';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  altText: Maybe<Scalars['String']['output']>;
  assetId: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  extension: Maybe<Scalars['String']['output']>;
  label: Maybe<Scalars['String']['output']>;
  mimeType: Maybe<Scalars['String']['output']>;
  originalFilename: Maybe<Scalars['String']['output']>;
  path: Maybe<Scalars['String']['output']>;
  sha1hash: Maybe<Scalars['String']['output']>;
  size: Maybe<Scalars['Float']['output']>;
  source: Maybe<SanityAssetSourceData>;
  title: Maybe<Scalars['String']['output']>;
  uploadId: Maybe<Scalars['String']['output']>;
  url: Maybe<Scalars['String']['output']>;
};

export type SanityFileAssetFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  altText: InputMaybe<StringFilter>;
  assetId: InputMaybe<StringFilter>;
  description: InputMaybe<StringFilter>;
  extension: InputMaybe<StringFilter>;
  label: InputMaybe<StringFilter>;
  mimeType: InputMaybe<StringFilter>;
  originalFilename: InputMaybe<StringFilter>;
  path: InputMaybe<StringFilter>;
  sha1hash: InputMaybe<StringFilter>;
  size: InputMaybe<FloatFilter>;
  source: InputMaybe<SanityAssetSourceDataFilter>;
  title: InputMaybe<StringFilter>;
  uploadId: InputMaybe<StringFilter>;
  url: InputMaybe<StringFilter>;
};

export type SanityFileAssetSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  altText: InputMaybe<SortOrder>;
  assetId: InputMaybe<SortOrder>;
  description: InputMaybe<SortOrder>;
  extension: InputMaybe<SortOrder>;
  label: InputMaybe<SortOrder>;
  mimeType: InputMaybe<SortOrder>;
  originalFilename: InputMaybe<SortOrder>;
  path: InputMaybe<SortOrder>;
  sha1hash: InputMaybe<SortOrder>;
  size: InputMaybe<SortOrder>;
  source: InputMaybe<SanityAssetSourceDataSorting>;
  title: InputMaybe<SortOrder>;
  uploadId: InputMaybe<SortOrder>;
  url: InputMaybe<SortOrder>;
};

export type SanityImageAsset = Document & {
  __typename?: 'SanityImageAsset';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  altText: Maybe<Scalars['String']['output']>;
  assetId: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  extension: Maybe<Scalars['String']['output']>;
  label: Maybe<Scalars['String']['output']>;
  metadata: Maybe<SanityImageMetadata>;
  mimeType: Maybe<Scalars['String']['output']>;
  originalFilename: Maybe<Scalars['String']['output']>;
  path: Maybe<Scalars['String']['output']>;
  sha1hash: Maybe<Scalars['String']['output']>;
  size: Maybe<Scalars['Float']['output']>;
  source: Maybe<SanityAssetSourceData>;
  title: Maybe<Scalars['String']['output']>;
  uploadId: Maybe<Scalars['String']['output']>;
  url: Maybe<Scalars['String']['output']>;
};

export type SanityImageAssetFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  altText: InputMaybe<StringFilter>;
  assetId: InputMaybe<StringFilter>;
  description: InputMaybe<StringFilter>;
  extension: InputMaybe<StringFilter>;
  label: InputMaybe<StringFilter>;
  metadata: InputMaybe<SanityImageMetadataFilter>;
  mimeType: InputMaybe<StringFilter>;
  originalFilename: InputMaybe<StringFilter>;
  path: InputMaybe<StringFilter>;
  sha1hash: InputMaybe<StringFilter>;
  size: InputMaybe<FloatFilter>;
  source: InputMaybe<SanityAssetSourceDataFilter>;
  title: InputMaybe<StringFilter>;
  uploadId: InputMaybe<StringFilter>;
  url: InputMaybe<StringFilter>;
};

export type SanityImageAssetSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  altText: InputMaybe<SortOrder>;
  assetId: InputMaybe<SortOrder>;
  description: InputMaybe<SortOrder>;
  extension: InputMaybe<SortOrder>;
  label: InputMaybe<SortOrder>;
  metadata: InputMaybe<SanityImageMetadataSorting>;
  mimeType: InputMaybe<SortOrder>;
  originalFilename: InputMaybe<SortOrder>;
  path: InputMaybe<SortOrder>;
  sha1hash: InputMaybe<SortOrder>;
  size: InputMaybe<SortOrder>;
  source: InputMaybe<SanityAssetSourceDataSorting>;
  title: InputMaybe<SortOrder>;
  uploadId: InputMaybe<SortOrder>;
  url: InputMaybe<SortOrder>;
};

export type SanityImageCrop = {
  __typename?: 'SanityImageCrop';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  bottom: Maybe<Scalars['Float']['output']>;
  left: Maybe<Scalars['Float']['output']>;
  right: Maybe<Scalars['Float']['output']>;
  top: Maybe<Scalars['Float']['output']>;
};

export type SanityImageCropFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  bottom: InputMaybe<FloatFilter>;
  left: InputMaybe<FloatFilter>;
  right: InputMaybe<FloatFilter>;
  top: InputMaybe<FloatFilter>;
};

export type SanityImageCropSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  bottom: InputMaybe<SortOrder>;
  left: InputMaybe<SortOrder>;
  right: InputMaybe<SortOrder>;
  top: InputMaybe<SortOrder>;
};

export type SanityImageDimensions = {
  __typename?: 'SanityImageDimensions';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  aspectRatio: Maybe<Scalars['Float']['output']>;
  height: Maybe<Scalars['Float']['output']>;
  width: Maybe<Scalars['Float']['output']>;
};

export type SanityImageDimensionsFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  aspectRatio: InputMaybe<FloatFilter>;
  height: InputMaybe<FloatFilter>;
  width: InputMaybe<FloatFilter>;
};

export type SanityImageDimensionsSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  aspectRatio: InputMaybe<SortOrder>;
  height: InputMaybe<SortOrder>;
  width: InputMaybe<SortOrder>;
};

export type SanityImageHotspot = {
  __typename?: 'SanityImageHotspot';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  height: Maybe<Scalars['Float']['output']>;
  width: Maybe<Scalars['Float']['output']>;
  x: Maybe<Scalars['Float']['output']>;
  y: Maybe<Scalars['Float']['output']>;
};

export type SanityImageHotspotFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  height: InputMaybe<FloatFilter>;
  width: InputMaybe<FloatFilter>;
  x: InputMaybe<FloatFilter>;
  y: InputMaybe<FloatFilter>;
};

export type SanityImageHotspotSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  height: InputMaybe<SortOrder>;
  width: InputMaybe<SortOrder>;
  x: InputMaybe<SortOrder>;
  y: InputMaybe<SortOrder>;
};

export type SanityImageMetadata = {
  __typename?: 'SanityImageMetadata';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  blurHash: Maybe<Scalars['String']['output']>;
  dimensions: Maybe<SanityImageDimensions>;
  hasAlpha: Maybe<Scalars['Boolean']['output']>;
  isOpaque: Maybe<Scalars['Boolean']['output']>;
  location: Maybe<Geopoint>;
  lqip: Maybe<Scalars['String']['output']>;
  palette: Maybe<SanityImagePalette>;
};

export type SanityImageMetadataFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  blurHash: InputMaybe<StringFilter>;
  dimensions: InputMaybe<SanityImageDimensionsFilter>;
  hasAlpha: InputMaybe<BooleanFilter>;
  isOpaque: InputMaybe<BooleanFilter>;
  location: InputMaybe<GeopointFilter>;
  lqip: InputMaybe<StringFilter>;
  palette: InputMaybe<SanityImagePaletteFilter>;
};

export type SanityImageMetadataSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  blurHash: InputMaybe<SortOrder>;
  dimensions: InputMaybe<SanityImageDimensionsSorting>;
  hasAlpha: InputMaybe<SortOrder>;
  isOpaque: InputMaybe<SortOrder>;
  location: InputMaybe<GeopointSorting>;
  lqip: InputMaybe<SortOrder>;
  palette: InputMaybe<SanityImagePaletteSorting>;
};

export type SanityImagePalette = {
  __typename?: 'SanityImagePalette';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  darkMuted: Maybe<SanityImagePaletteSwatch>;
  darkVibrant: Maybe<SanityImagePaletteSwatch>;
  dominant: Maybe<SanityImagePaletteSwatch>;
  lightMuted: Maybe<SanityImagePaletteSwatch>;
  lightVibrant: Maybe<SanityImagePaletteSwatch>;
  muted: Maybe<SanityImagePaletteSwatch>;
  vibrant: Maybe<SanityImagePaletteSwatch>;
};

export type SanityImagePaletteFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  darkMuted: InputMaybe<SanityImagePaletteSwatchFilter>;
  darkVibrant: InputMaybe<SanityImagePaletteSwatchFilter>;
  dominant: InputMaybe<SanityImagePaletteSwatchFilter>;
  lightMuted: InputMaybe<SanityImagePaletteSwatchFilter>;
  lightVibrant: InputMaybe<SanityImagePaletteSwatchFilter>;
  muted: InputMaybe<SanityImagePaletteSwatchFilter>;
  vibrant: InputMaybe<SanityImagePaletteSwatchFilter>;
};

export type SanityImagePaletteSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  darkMuted: InputMaybe<SanityImagePaletteSwatchSorting>;
  darkVibrant: InputMaybe<SanityImagePaletteSwatchSorting>;
  dominant: InputMaybe<SanityImagePaletteSwatchSorting>;
  lightMuted: InputMaybe<SanityImagePaletteSwatchSorting>;
  lightVibrant: InputMaybe<SanityImagePaletteSwatchSorting>;
  muted: InputMaybe<SanityImagePaletteSwatchSorting>;
  vibrant: InputMaybe<SanityImagePaletteSwatchSorting>;
};

export type SanityImagePaletteSwatch = {
  __typename?: 'SanityImagePaletteSwatch';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  background: Maybe<Scalars['String']['output']>;
  foreground: Maybe<Scalars['String']['output']>;
  population: Maybe<Scalars['Float']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type SanityImagePaletteSwatchFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  background: InputMaybe<StringFilter>;
  foreground: InputMaybe<StringFilter>;
  population: InputMaybe<FloatFilter>;
  title: InputMaybe<StringFilter>;
};

export type SanityImagePaletteSwatchSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  background: InputMaybe<SortOrder>;
  foreground: InputMaybe<SortOrder>;
  population: InputMaybe<SortOrder>;
  title: InputMaybe<SortOrder>;
};

export type Sanity_DocumentFilter = {
  /** All documents that are drafts. */
  is_draft: InputMaybe<Scalars['Boolean']['input']>;
  /** All documents referencing the given document ID. */
  references: InputMaybe<Scalars['ID']['input']>;
};

export type Slug = {
  __typename?: 'Slug';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  current: Maybe<Scalars['String']['output']>;
  source: Maybe<Scalars['String']['output']>;
};

export type SlugFilter = {
  _key: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  current: InputMaybe<StringFilter>;
  source: InputMaybe<StringFilter>;
};

export type SlugSorting = {
  _key: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  current: InputMaybe<SortOrder>;
  source: InputMaybe<SortOrder>;
};

export enum SortOrder {
  /** Sorts on the value in ascending order. */
  Asc = 'ASC',
  /** Sorts on the value in descending order. */
  Desc = 'DESC'
}

export type Span = {
  __typename?: 'Span';
  _key: Maybe<Scalars['String']['output']>;
  _type: Maybe<Scalars['String']['output']>;
  marks: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  text: Maybe<Scalars['String']['output']>;
};

export type Speaker = Document & {
  __typename?: 'Speaker';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  company: Maybe<Scalars['String']['output']>;
  description: Maybe<RichText>;
  instagram: Maybe<Scalars['String']['output']>;
  isKeynoter: Maybe<Scalars['Boolean']['output']>;
  linkedin: Maybe<Scalars['String']['output']>;
  longName: Maybe<Scalars['String']['output']>;
  photos: Maybe<Array<Maybe<Image>>>;
  profilePicture: Maybe<Image>;
  showName: Maybe<Scalars['String']['output']>;
  slug: Maybe<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
  twitter: Maybe<Scalars['String']['output']>;
  webpage: Maybe<Scalars['String']['output']>;
};

export type SpeakerFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  company: InputMaybe<StringFilter>;
  description: InputMaybe<RichTextFilter>;
  instagram: InputMaybe<StringFilter>;
  isKeynoter: InputMaybe<BooleanFilter>;
  linkedin: InputMaybe<StringFilter>;
  longName: InputMaybe<StringFilter>;
  profilePicture: InputMaybe<ImageFilter>;
  showName: InputMaybe<StringFilter>;
  slug: InputMaybe<StringFilter>;
  title: InputMaybe<StringFilter>;
  twitter: InputMaybe<StringFilter>;
  webpage: InputMaybe<StringFilter>;
};

export type SpeakerSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  company: InputMaybe<SortOrder>;
  description: InputMaybe<RichTextSorting>;
  instagram: InputMaybe<SortOrder>;
  isKeynoter: InputMaybe<SortOrder>;
  linkedin: InputMaybe<SortOrder>;
  longName: InputMaybe<SortOrder>;
  profilePicture: InputMaybe<ImageSorting>;
  showName: InputMaybe<SortOrder>;
  slug: InputMaybe<SortOrder>;
  title: InputMaybe<SortOrder>;
  twitter: InputMaybe<SortOrder>;
  webpage: InputMaybe<SortOrder>;
};

export type Sponsor = Document & {
  __typename?: 'Sponsor';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  de: Maybe<Scalars['String']['output']>;
  description: Maybe<RichText>;
  image: Maybe<Image>;
  instagram: Maybe<Scalars['String']['output']>;
  linkedin: Maybe<Scalars['String']['output']>;
  logo: Maybe<Image>;
  name: Maybe<Scalars['String']['output']>;
  seoDescription: Maybe<Scalars['String']['output']>;
  seoImage: Maybe<Image>;
  seoKeywords: Maybe<Scalars['String']['output']>;
  seoTitle: Maybe<Scalars['String']['output']>;
  /** We offer custom pages USUALLY for "platinum", "gold" and some "silver" sponsors. Validate if this sponsor needs a custom page */
  showPage: Maybe<Scalars['Boolean']['output']>;
  twitter: Maybe<Scalars['String']['output']>;
  type: Maybe<SponsorType>;
  url: Maybe<Scalars['String']['output']>;
};

export type SponsorFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  de: InputMaybe<StringFilter>;
  description: InputMaybe<RichTextFilter>;
  image: InputMaybe<ImageFilter>;
  instagram: InputMaybe<StringFilter>;
  linkedin: InputMaybe<StringFilter>;
  logo: InputMaybe<ImageFilter>;
  name: InputMaybe<StringFilter>;
  seoDescription: InputMaybe<StringFilter>;
  seoImage: InputMaybe<ImageFilter>;
  seoKeywords: InputMaybe<StringFilter>;
  seoTitle: InputMaybe<StringFilter>;
  showPage: InputMaybe<BooleanFilter>;
  twitter: InputMaybe<StringFilter>;
  type: InputMaybe<SponsorTypeFilter>;
  url: InputMaybe<StringFilter>;
};

export type SponsorSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  de: InputMaybe<SortOrder>;
  description: InputMaybe<RichTextSorting>;
  image: InputMaybe<ImageSorting>;
  instagram: InputMaybe<SortOrder>;
  linkedin: InputMaybe<SortOrder>;
  logo: InputMaybe<ImageSorting>;
  name: InputMaybe<SortOrder>;
  seoDescription: InputMaybe<SortOrder>;
  seoImage: InputMaybe<ImageSorting>;
  seoKeywords: InputMaybe<SortOrder>;
  seoTitle: InputMaybe<SortOrder>;
  showPage: InputMaybe<SortOrder>;
  twitter: InputMaybe<SortOrder>;
  url: InputMaybe<SortOrder>;
};

export type SponsorType = Document & {
  __typename?: 'SponsorType';
  /** Date the document was created */
  _createdAt: Maybe<Scalars['DateTime']['output']>;
  /** Document ID */
  _id: Maybe<Scalars['ID']['output']>;
  _key: Maybe<Scalars['String']['output']>;
  /** Current document revision */
  _rev: Maybe<Scalars['String']['output']>;
  /** Document type */
  _type: Maybe<Scalars['String']['output']>;
  /** Date the document was last modified */
  _updatedAt: Maybe<Scalars['DateTime']['output']>;
  benefits_list_1: Maybe<RichText>;
  benefits_list_2: Maybe<RichText>;
  description: Maybe<RichText>;
  icon: Maybe<Scalars['String']['output']>;
  name: Maybe<Scalars['String']['output']>;
  position: Maybe<Scalars['String']['output']>;
};

export type SponsorTypeFilter = {
  /** Apply filters on document level */
  _: InputMaybe<Sanity_DocumentFilter>;
  _createdAt: InputMaybe<DatetimeFilter>;
  _id: InputMaybe<IdFilter>;
  _key: InputMaybe<StringFilter>;
  _rev: InputMaybe<StringFilter>;
  _type: InputMaybe<StringFilter>;
  _updatedAt: InputMaybe<DatetimeFilter>;
  benefits_list_1: InputMaybe<RichTextFilter>;
  benefits_list_2: InputMaybe<RichTextFilter>;
  description: InputMaybe<RichTextFilter>;
  icon: InputMaybe<StringFilter>;
  name: InputMaybe<StringFilter>;
  position: InputMaybe<StringFilter>;
};

export type SponsorTypeSorting = {
  _createdAt: InputMaybe<SortOrder>;
  _id: InputMaybe<SortOrder>;
  _key: InputMaybe<SortOrder>;
  _rev: InputMaybe<SortOrder>;
  _type: InputMaybe<SortOrder>;
  _updatedAt: InputMaybe<SortOrder>;
  benefits_list_1: InputMaybe<RichTextSorting>;
  benefits_list_2: InputMaybe<RichTextSorting>;
  description: InputMaybe<RichTextSorting>;
  icon: InputMaybe<SortOrder>;
  name: InputMaybe<SortOrder>;
  position: InputMaybe<SortOrder>;
};

export type StringFilter = {
  /** Checks if the value is equal to the given input. */
  eq: InputMaybe<Scalars['String']['input']>;
  in: InputMaybe<Array<Scalars['String']['input']>>;
  /** Checks if the value is defined. */
  is_defined: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks if the value matches the given word/words. */
  matches: InputMaybe<Scalars['String']['input']>;
  /** Checks if the value is not equal to the given input. */
  neq: InputMaybe<Scalars['String']['input']>;
  nin: InputMaybe<Array<Scalars['String']['input']>>;
};

export type GetAllPagesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllPagesQuery = { __typename?: 'RootQuery', allPage: Array<{ __typename?: 'Page', _id: string | null, name: string | null, slug: { __typename?: 'Slug', current: string | null } | null }> };

export type GetPageDetailsQueryVariables = Exact<{
  input: Scalars['String']['input'];
}>;


export type GetPageDetailsQuery = { __typename?: 'RootQuery', allPage: Array<{ __typename?: 'Page', _id: string | null, name: string | null, seoTitle: string | null, seoKeywords: string | null, seoDescription: string | null, slug: { __typename?: 'Slug', current: string | null } | null, seoImage: { __typename?: 'Image', asset: { __typename?: 'SanityImageAsset', _id: string | null, altText: string | null, path: string | null, label: string | null, title: string | null } | null } | null, navbar: { __typename?: 'Navbar', links: Array<{ __typename?: 'Link', url: string | null, text: string | null, target: string | null, icon: string | null, style: string | null } | null> | null } | null, footer: { __typename?: 'Footer', followLinks: Array<{ __typename?: 'Link', url: string | null, text: string | null, target: string | null, icon: string | null, style: string | null } | null> | null, sectionLinks: Array<{ __typename?: 'Link', url: string | null, text: string | null, target: string | null, icon: string | null, style: string | null } | null> | null } | null, sections: Array<{ __typename: 'Card' } | { __typename: 'CustomInfo', slug: string | null, name: string | null, description: { __typename?: 'RichText', name: string | null, textType: string | null, htmlTextRaw: unknown | null, markdownText: string | null } | null } | { __typename: 'Hero', heading: string | null, tagline: string | null, icon: string | null, actions: Array<{ __typename?: 'Link', url: string | null, text: string | null, target: string | null, icon: string | null, style: string | null } | null> | null, image: { __typename?: 'Image', asset: { __typename?: 'SanityImageAsset', _id: string | null, _key: string | null, altText: string | null, path: string | null, label: string | null, title: string | null } | null } | null, customAttributes: Array<{ __typename?: 'CustomAttributes', name: string | null, value: string | null } | null> | null } | { __typename: 'RichText', name: string | null, textType: string | null, htmlTextRaw: unknown | null, markdownText: string | null } | { __typename: 'Row', rowType: string | null, title: string | null, icon: string | null, description: { __typename?: 'RichText', name: string | null, htmlTextRaw: unknown | null, markdownText: string | null } | null, children: Array<{ __typename: 'Card', title: string | null, showType: string | null, icon: string | null, description: { __typename?: 'RichText', name: string | null, textType: string | null, htmlTextRaw: unknown | null, markdownText: string | null } | null, image: { __typename?: 'Image', asset: { __typename?: 'SanityImageAsset', _id: string | null, altText: string | null, path: string | null, label: string | null, title: string | null } | null } | null } | { __typename: 'Image', asset: { __typename?: 'SanityImageAsset', _id: string | null, altText: string | null, path: string | null, label: string | null, title: string | null } | null } | { __typename: 'RichText', name: string | null, textType: string | null, htmlTextRaw: unknown | null, markdownText: string | null } | null> | null } | null> | null }> };


export const GetAllPagesDocument = gql`
    query getAllPages {
  allPage(where: {dynamicPage: {eq: true}}) {
    _id
    name
    slug {
      current
    }
  }
}
    `;
export const GetPageDetailsDocument = gql`
    query getPageDetails($input: String!) {
  allPage(where: {slug: {current: {eq: $input}}}) {
    _id
    name
    slug {
      current
    }
    seoTitle
    seoKeywords
    seoDescription
    seoImage {
      asset {
        _id
        altText
        path
        label
        title
      }
    }
    navbar {
      links {
        url
        text
        target
        icon
        style
      }
    }
    footer {
      followLinks {
        url
        text
        target
        icon
        style
      }
      sectionLinks {
        url
        text
        target
        icon
        style
      }
    }
    sections {
      __typename
      ... on CustomInfo {
        slug
        name
        description {
          name
          textType
          htmlTextRaw
          markdownText
        }
      }
      ... on Hero {
        heading
        tagline
        icon
        actions {
          url
          text
          target
          icon
          style
        }
        image {
          asset {
            _id
            _key
            altText
            path
            label
            title
          }
        }
        customAttributes {
          name
          value
        }
      }
      ... on RichText {
        name
        textType
        htmlTextRaw
        markdownText
      }
      ... on Row {
        rowType
        title
        description {
          name
          htmlTextRaw
          markdownText
        }
        icon
        children {
          __typename
          ... on Card {
            title
            description {
              name
              textType
              htmlTextRaw
              markdownText
            }
            showType
            icon
            image {
              asset {
                _id
                altText
                path
                label
                title
              }
            }
          }
          ... on Image {
            asset {
              _id
              altText
              path
              label
              title
            }
          }
          ... on RichText {
            name
            textType
            htmlTextRaw
            markdownText
          }
        }
      }
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    getAllPages(variables?: GetAllPagesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetAllPagesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetAllPagesQuery>(GetAllPagesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAllPages', 'query', variables);
    },
    getPageDetails(variables: GetPageDetailsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetPageDetailsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetPageDetailsQuery>(GetPageDetailsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getPageDetails', 'query', variables);
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;